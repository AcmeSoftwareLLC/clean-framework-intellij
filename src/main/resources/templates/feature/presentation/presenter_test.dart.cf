import 'package:{{package_name}}/features/{{feature_name_snake}}/domain/{{feature_name_snake}}_domain_model.dart';
import 'package:{{package_name}}/features/{{feature_name_snake}}/domain/{{feature_name_snake}}_use_case.dart';
import 'package:{{package_name}}/features/{{feature_name_snake}}/presentation/{{feature_name_snake}}_presenter.dart';
import 'package:{{package_name}}/features/{{feature_name_snake}}/presentation/{{feature_name_snake}}_view_model.dart';
import 'package:{{package_name}}/providers.dart';
import 'package:clean_framework_test/clean_framework_test.dart';
import 'package:flutter_test/flutter_test.dart';

void main() {
  group('{{feature_name}}Presenter tests |', () {
    presenterTest<{{feature_name}}ViewModel, {{feature_name}}UIDomainModel, {{feature_name}}UseCase>(
      'example',
      create: (builder) => {{feature_name}}Presenter(builder: builder),
      overrides: [
        {{feature_name_camel}}UseCaseProvider.overrideWith({{feature_name}}UseCaseFake()),
      ],
      setup: (useCase) {
        useCase.updateId('test');
      },
      expect: () => const [
        {{feature_name}}ViewModel(id: ''),
        {{feature_name}}ViewModel(id: 'fake-test'),
      ],
    );
  });
}

class {{feature_name}}UseCaseFake extends {{feature_name}}UseCase {
  @override
  void updateId(String id) {
    super.updateId('fake-$id');
  }
}
